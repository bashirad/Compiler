Front end -
	intermediate representation - concrete syntax trees
Back end - website, optimization

Semantic refers to meaning - type and scope

Lexer
	Lex is called scanner

Parser
	if warning: report and continue compiler
	if error: report and stop compiler
	focus on syntax - for example: print stmt must be like this "print ( exp )"


AI
	using AI works, and cite it then make a write a documentation about it.

GitHub
	develop on separte 4 branches and then put the final code in main.
	send email to Labouseur about this

Make a class for Tokens and each time create an instance of the class
OR
use stream functional programming in Java

'=' assignment operator

left brace and right braces - begin program and end program

$ end of program -


if you are lexing more than one program -  lex until you find an error and then skip to the next program using the meta symbol

do not hardcode the filename
	the filename is the first parameter

Line and position numbers should be passed with the Tokens

have open quote and close quote symbols


TEST CODE IS HERE:

{}$
{{{{{{}}}}}}$
{{{{{{}}} /* comments are ignored */ }}}}$
{ /* comments are still ignored */ int @}$
{
 int a
 a = a
 string b
 a = b
}$